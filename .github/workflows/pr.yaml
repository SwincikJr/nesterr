name: Node.js CI

on:
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Extract branch name
        shell: bash
        id: "extract_branch_name"
        run: echo "branch_name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      - name: Show branch name
        shell: bash
        run: echo ${{ steps.extract_branch_name.outputs.branch_name }}

      - name: Extract PR type
        shell: bash
        id: "extract_pr_type"
        run: echo pr_type=$(echo ${{ steps.extract_branch_name.outputs.branch_name }} | cut -d '/' -f 1) >> $GITHUB_OUTPUT

      - name: Show PR type
        shell: bash
        run: echo ${{ steps.extract_pr_type.outputs.pr_type }}

      - name: Extract latest tag
        shell: bash
        id: "extract_latest_tag"
        run: echo "latest_tag=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]' --sort=-v:refname | grep -v '\-rc.*' | head -n 1)" >> $GITHUB_OUTPUT

      - name: Show latest tag
        shell: bash
        run: echo ${{ steps.extract_latest_tag.outputs.latest_tag }}

      - name: Extract is_first_tag
        shell: bash
        id: "extract_is_first_tag"
        run: if [ -z "$latest_tag" ]; then echo "is_first_tag=true" >> $GITHUB_OUTPUT; else "is_first_tag=false" >> $GITHUB_OUTPUT; fi

      - name: Show is_first_tag
        shell: bash
        run: echo ${{ steps.extract_is_first_tag.outputs.is_first_tag }}

      - name: Create first release candidate tag
        if: steps.extract_is_first_tag.outputs.is_first_tag == 'true'
        shell: bash
        run: |
          datetime_branch=$(date +'%Y%m%d%H%M%S')
          new_tag=v1.0.0-rc.$datetime_branch
          git config --global user.name 'SwincikJr'
          git config --global user.email 'mauroswincikjr@gmail.com'
          git config pull.rebase false
          git fetch --all
          git checkout -b rc/$datetime_branch
          git merge main -m "auto merge"
          sed -i "s/\"version\": \".*\"/\"version\": \"$new_tag\"/" package.json
          git add .
          git commit -m "auto commit"
          git push origin rc/$datetime_branch

      - name: Create next release candidate tag
        if: steps.extract_is_first_tag.outputs.is_first_tag == 'false'
        shell: bash
        run: echo "creating next release candidate tag..."
